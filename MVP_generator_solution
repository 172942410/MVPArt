

Name: ArtActivity
--------------------------------------------------------------------------------------

#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "")package ${PACKAGE_NAME};#end

import android.support.annotation.Nullable;

import butterknife.BindView;
import me.jessyan.art.base.App;
import me.jessyan.art.base.BaseActivity;
import me.jessyan.art.mvp.IView;
import me.jessyan.art.mvp.Message;
import me.jessyan.art.utils.UiUtils;

#parse("File Header.java")

public class ${NAME}Activity extends BaseActivity<${NAME}Presenter> implements IView {



    @Override
    public int initView() {
        return 0;
    }

    @Override
    public void initData() {

    }

    @Override
    public ${NAME}Presenter obtainPresenter() {
        return new ${NAME}Presenter(((App) getApplication()).getAppComponent());
    }


    @Override
    public void showLoading() {

    }

    @Override
    public void hideLoading() {

    }

    @Override
    public void showMessage(String message) {
        UiUtils.SnackbarText(message);
    }

    @Override
    public void handleMessage(Message message) {
        switch (message.what) {
            case 0:
                break;
            case 1:
                break;
        }
    }

}

--------------------------------------------------------------------------------------




Name: ArtModel
--------------------------------------------------------------------------------------

#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "")package ${PACKAGE_NAME};#end


import me.jessyan.art.mvp.IModel;
import me.jessyan.art.mvp.IRepositoryManager;

/**
 * 必须实现IModel
 * 可以根据不同的业务逻辑划分多个Repository类,多个业务逻辑相近的页面可以使用同一个Repository类
 * 无需每个页面都创建一个独立的Repository
 * 通过{@link IRepositoryManager#createRepository(Class)}获得的Repository实例,为单例对象
 */

#parse("File Header.java")

public class ${NAME}Repository implements IModel {

    private IRepositoryManager mManager;

    /**
     * 必须含有一个接收IRepositoryManager接口的构造函数,否则会报错
     * @param manager
     */
    public ${NAME}Repository(IRepositoryManager manager) {
        this.mManager = manager;
    }



    @Override
    public void onDestory() {

    }
}


--------------------------------------------------------------------------------------




Name: ArtPresenter
--------------------------------------------------------------------------------------

#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "")package ${PACKAGE_NAME};#end


import me.jessyan.art.di.component.AppComponent;
import me.jessyan.art.mvp.BasePresenter;
import me.jessyan.art.mvp.Message;
import me.jessyan.mvpart.demo.mvp.model.UserRepository;
import me.jessyan.rxerrorhandler.core.RxErrorHandler;
import me.jessyan.rxerrorhandler.handler.ErrorHandleSubscriber;
import me.jessyan.rxerrorhandler.handler.RetryWithDelay;


#parse("File Header.java")

public class ${NAME}Presenter extends BasePresenter<YoureRepository> {
    private RxErrorHandler mErrorHandler;


    public ${NAME}Presenter(AppComponent appComponent) {
        super(appComponent.repositoryManager().createRepository(YoureRepository.class));
        this.mErrorHandler = appComponent.rxErrorHandler();
    }


    @Override
    public void onDestroy() {
        super.onDestroy();
        this.mErrorHandler = null;
    }
}


--------------------------------------------------------------------------------------


Name: AutoView
--------------------------------------------------------------------------------------
#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "")package ${PACKAGE_NAME};#end

import android.content.Context;
import android.support.annotation.Nullable;
import android.util.AttributeSet;
import android.view.ViewGroup;

import com.zhy.autolayout.AutoLayoutInfo;
import com.zhy.autolayout.utils.AutoLayoutHelper;

/**
 * 此Template用于生成AutoLayout需要的的Auto系列View,如需要使ScrollView适配,使用此Template输入ScrollView,即可生成
 * AutoScrollView,使用此View即可自适应
 * Created by jess on 16/4/14.
 */
public class Auto${NAME} extends ${NAME} {
    private AutoLayoutHelper mHelper = new AutoLayoutHelper(this);

    public Auto${NAME}(Context context) {
        super(context);
    }

    public Auto${NAME}(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
    }

    public Auto${NAME}(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
    {
        if (!isInEditMode())
            mHelper.adjustChildren();
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    }


    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b)
    {
        super.onLayout(changed, l, t, r, b);
    }


    @Override
    public LayoutParams generateLayoutParams(AttributeSet attrs) {
        return new LayoutParams(getContext(), attrs);
    }


    public static class LayoutParams extends ${NAME}.LayoutParams
            implements AutoLayoutHelper.AutoLayoutParams
    {
        private AutoLayoutInfo mAutoLayoutInfo;

        public LayoutParams(Context c, AttributeSet attrs)
        {
            super(c, attrs);
            mAutoLayoutInfo = AutoLayoutHelper.getAutoLayoutInfo(c, attrs);
        }

        @Override
        public AutoLayoutInfo getAutoLayoutInfo()
        {
            return mAutoLayoutInfo;
        }


        public LayoutParams(int width, int height)
        {
            super(width, height);
        }


        public LayoutParams(ViewGroup.LayoutParams source)
        {
            super(source);
        }

        public LayoutParams(MarginLayoutParams source)
        {
            super(source);
        }

    }
}

--------------------------------------------------------------------------------------

